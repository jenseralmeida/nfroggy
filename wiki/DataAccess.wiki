#Data Access by Froggy and Scope

= Introduction =

Why one more data access layer? The answer is: I use this filosofy by seven years, thats incredibly simple work and the learning curve is almost nome.

= Details =

There is one example:

{{{
[Test]
public void NestedWithTransactionTest()
{
    using (var scope = new Scope(new DAScopeContext(TransactionOption.Required)))
    {
        Assert.IsNotNull(scope.GetDAScopeContext());
        Assert.IsNotNull(scope.GetDAScopeContext().Connection);
        Assert.IsNotNull(scope.GetDAScopeContext().Transaction);
        NestedLevel1WithTransactionTest(scope);
        scope.Complete();
    }
}

private static void NestedLevel1WithTransactionTest(Scope expected)
{
    using (var scope = new Scope( new DAScopeContext(TransactionOption.Required) ))
    {
        Assert.AreSame(expected, Scope.Current);
        Assert.AreEqual(Scope.Current, scope);
        Assert.IsNotNull(scope.GetDAScopeContext());
        Assert.IsNotNull(scope.GetDAScopeContext().Connection);
        Assert.IsNotNull(scope.GetDAScopeContext().Transaction);
        Assert.AreSame(Scope.Current.GetDAScopeContext(), scope.GetDAScopeContext());
        Assert.AreSame(Scope.Current.GetDAScopeContext().Connection, scope.GetDAScopeContext().Connection);
        Assert.AreSame(Scope.Current.GetDAScopeContext().Transaction, scope.GetDAScopeContext().Transaction);

        scope.Complete();
    }
}
}}}